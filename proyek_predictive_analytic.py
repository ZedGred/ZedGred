# -*- coding: utf-8 -*-
"""proyek_predictive_analytic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lCrUKMRloZ5Ay0TvXFl5zP0PCq4SwBkh

Nama:Pebiyan Firmansyah
Email:pebiyanfirmansyah22@gmail.com
no.telp:089616061025

1.mendownload dataset dari kaggle
"""

import os
os.environ['KAGGLE_CONFIG_DIR']='/content'
!kaggle datasets download -d mrsimple07/obesity-prediction

"""2.mengimport library yang dibutuhkan"""

import tensorflow as tf
import numpy as np
import pandas as pd
import sklearn as sk
import zipfile
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score

"""3.mengextract dataset"""

local_zip='/content/obesity-prediction.zip'
zip_ref = zipfile.ZipFile(local_zip,'r')
zip_ref.extractall('/content')
zip_ref.close()
!rm -rf

"""4.membaca dataset"""

#membaca dataset
obes =  pd.read_csv('/content/obesity_data.csv')
obes

"""
5.Mengecek dataset,
Jumlah dataset=1000"""

obes.info()

"""6.Visulisasikan teknik univariete analisis"""

feature = ['Gender']
count = obes[feature].value_counts()
percent = 100*obes[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature[0])

feature = ['ObesityCategory']
count = obes[feature].value_counts()
percent = 100*obes[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature[0])

obes.hist(bins=50, figsize=(20,15))
plt.show()

"""7.visualisai teknik multivariste analisis"""

feature = ['Gender','ObesityCategory']
count = obes[feature].value_counts()
percent = 100*obes[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=' dan '.join(feature))

sns.pairplot(obes, diag_kind = 'kde')

plt.figure(figsize=(10, 8))
correlation_matrix = obes.corr().round(2)
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)

"""8.melakukan one hot encoding untuk data non numerik"""

from sklearn.preprocessing import OneHotEncoder
obes=pd.concat([obes,pd.get_dummies(obes['Gender'],prefix='Gender')],axis=1)
obes.drop(['Gender'],axis=1,inplace=True)
obes.head()

"""9.memisah dataset"""

from sklearn.model_selection import train_test_split
X=obes[['Age','Height','Weight','BMI','PhysicalActivityLevel','Gender_Female']]
y=obes['ObesityCategory']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 123)

"""10.menggunakan model random forest"""

from sklearn.ensemble import RandomForestClassifier
rf = RandomForestClassifier()
rf.fit(X_train, y_train)

"""11.menggunakan model svm"""

from sklearn.svm import SVC
svm = SVC(kernel ='linear')
svm.fit(X_train, y_train)

"""12.menggunakan model logisticregression"""

from sklearn import linear_model
LG = linear_model.LogisticRegression()
LG.fit(X_train, y_train)

"""13.membuat dictionary untuk setiap algoritma"""

model_dict = { 'RF': rf,'SVM':svm,'LG':LG}

"""14.membuat dataframe acc"""

#membuat datafrane acc
acc = pd.DataFrame(columns=['train', 'test'], index=['SVM','RF','Logistic'])
model_dict = {'RF': rf,'SVM' : svm,'Logistic':LG}
for name, model in model_dict.items():
    acc.loc[name, 'train'] = accuracy_score(y_true=y_train, y_pred=model.predict(X_train))*100
    acc.loc[name, 'test'] = accuracy_score(y_true=y_test, y_pred=model.predict(X_test))*100

acc